{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/where-is-TDD/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Think Big","siteUrl":"https://marcingladkowski.pl"}},"markdownRemark":{"id":"d5c06cfe-107a-5ae7-910a-704e29611187","excerpt":"Last months I trying to following on rule “Write tests first!“. Even if the task is small or trivial I trying to test it. Why I didn’t working like this ?\nI…","html":"<p>Last months I trying to following on rule “Write tests first!“. Even if the task is small or trivial I trying to test it. Why I didn’t working like this ?\nI have a mindset about tests: I have to setup framework for it - it takes time, I have to write a lot of extra code and keep it SOLID as production code - it takes time,\nI have to maintain it - it takes time! and so on… But what you receive ? What is a holy grail of having tests ? It’s also time! You save it when you have change\nbusiness rules, or you fixed a bug. One command and status of application is displaying for you - SUCCES or FAILURE.</p>\n<p>but … Let’s start writing tests for new class (service)</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">SomeService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">boolean</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Oh it’s look great!</p>\n<p>Now, we will write tests for it. Usually, I writing tests for instantiating class by autowiting from Symfony framework.</p>\n<p>ok! Challenge accepted!</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\">\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Bundle<span class=\"token punctuation\">\\</span>FrameworkBundle<span class=\"token punctuation\">\\</span>Test<span class=\"token punctuation\">\\</span>KernelTestCase</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">SomeServiceTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">KernelTestCase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword static-context\">self</span><span class=\"token operator\">::</span><span class=\"token function\">bootKernel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">testShouldReturnInstanceOfService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword static-context\">self</span><span class=\"token operator\">::</span><span class=\"token function\">assertInstanceOf</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name static-context\">SomeService</span><span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword static-context\">self</span><span class=\"token operator\">::</span><span class=\"token variable\">$container</span><span class=\"token operator\">-></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name static-context\">SomeService</span><span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And let’s try to run this test by</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">php bin/console --env<span class=\"token operator\">=</span>test</code></pre></div>\n<p>Then we get:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>DependencyInjection<span class=\"token punctuation\">\\</span>Exception<span class=\"token punctuation\">\\</span>ServiceNotFoundException <span class=\"token builtin class-name\">:</span>\nThe <span class=\"token string\">\"App\\Service\\SomeService\"</span> <span class=\"token function\">service</span> or <span class=\"token builtin class-name\">alias</span> has been removed or inlined when the container was compiled.\nYou should either <span class=\"token function\">make</span> it public, or stop using the container directly and use dependency injection instead.</code></pre></div>\n<p>First time, when I received this exception I tried to find an error in services configuration but I found nothing, because everyting should be configured automaticaly (autowiring).</p>\n<p>How to resolve it fast and efficiently ?</p>\n<p>Just add this testing class to some other, where it will be using.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">IndexController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractController</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token attribute\"><span class=\"token delimiter punctuation\">#[</span><span class=\"token attribute-content\"><span class=\"token attribute-class-name class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token attribute-class-name class-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string single-quoted-string\">'index'</span><span class=\"token punctuation\">)</span></span><span class=\"token delimiter punctuation\">]</span></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">index</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">SomeService</span> <span class=\"token variable\">$service</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">Response</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'OK'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>And then tests will start working and autowiring start returning this service!</p>","frontmatter":{"title":"Symfony where is your TDD?","date":"December 27, 2021","description":null}},"previous":{"fields":{"slug":"/simple-object-factory/"},"frontmatter":{"title":"Simple test object factory"}},"next":{"fields":{"slug":"/name-and-tag/"},"frontmatter":{"title":"Give the name and... tag"}}},"pageContext":{"id":"d5c06cfe-107a-5ae7-910a-704e29611187","previousPostId":"6e7520d5-1b5a-510e-a88c-ede0028ed5a6","nextPostId":"5091daf4-a78a-543c-9ba2-5e52f8a5487e"}},
    "staticQueryHashes": ["4135132960","805692932"]}