{"componentChunkName":"component---src-templates-post-jsx","path":"/where-is-TDD/","result":{"data":{"site":{"siteMetadata":{"title":"marcingladkowski.pl"}},"markdownRemark":{"id":"3905c451-c52c-580d-9ec8-17379728624e","excerpt":"Last months I trying to following on rule \"Write tests first!\". Even if the task is small or trivial I trying to test it. Why I didn't working like this ?\nI have a mindset about tests: I have to setuâ€¦","html":"<p>Last months I trying to following on rule \"Write tests first!\". Even if the task is small or trivial I trying to test it. Why I didn't working like this ?\nI have a mindset about tests: I have to setup framework for it - it takes time, I have to write a lot of extra code and keep it SOLID as production code - it takes time,\nI have to maintain it - it takes time! and so on... But what you receive ? What is a holy grail of having tests ? It's also time! You save it when you have change\nbusiness rules, or you fixed a bug. One command and status of application is displaying for you - SUCCES or FAILURE.</p>\n<p>but ... Let's start writing tests for new class (service)</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">SomeService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">boolean</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Oh it's look great!</p>\n<p>Now, we will write tests for it. Usually, I writing tests for instantiating class by autowiting from Symfony framework.</p>\n<p>ok! Challenge accepted!</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Bundle<span class=\"token punctuation\">\\</span>FrameworkBundle<span class=\"token punctuation\">\\</span>Test<span class=\"token punctuation\">\\</span>KernelTestCase</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">SomeServiceTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">KernelTestCase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword static-context\">self</span><span class=\"token operator\">::</span><span class=\"token function\">bootKernel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">testShouldReturnInstanceOfService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword static-context\">self</span><span class=\"token operator\">::</span><span class=\"token function\">assertInstanceOf</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name static-context\">SomeService</span><span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword static-context\">self</span><span class=\"token operator\">::</span><span class=\"token variable\">$container</span><span class=\"token operator\">-></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name static-context\">SomeService</span><span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And let's try to run this test by</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">php bin/console <span class=\"token parameter variable\">--env</span><span class=\"token operator\">=</span>test</code></pre></div>\n<p>Then we get:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>DependencyInjection<span class=\"token punctuation\">\\</span>Exception<span class=\"token punctuation\">\\</span>ServiceNotFoundException <span class=\"token builtin class-name\">:</span>\nThe <span class=\"token string\">\"App\\Service\\SomeService\"</span> <span class=\"token function\">service</span> or <span class=\"token builtin class-name\">alias</span> has been removed or inlined when the container was compiled.\nYou should either <span class=\"token function\">make</span> it public, or stop using the container directly and use dependency injection instead.</code></pre></div>\n<p>First time, when I received this exception I tried to find an error in services configuration but I found nothing, because everyting should be configured automaticaly (autowiring).</p>\n<p>How to resolve it fast and efficiently ?</p>\n<p>Just add this testing class to some other, where it will be using.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">IndexController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractController</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token attribute\"><span class=\"token delimiter punctuation\">#[</span><span class=\"token attribute-content\"><span class=\"token attribute-class-name class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token attribute-class-name class-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string single-quoted-string\">'index'</span><span class=\"token punctuation\">)</span></span><span class=\"token delimiter punctuation\">]</span></span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">index</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">SomeService</span> <span class=\"token variable\">$service</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">Response</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'OK'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And then tests will start working and autowiring start returning this service!</p>","frontmatter":{"title":"Symfony where is your TDD?","date":"December 27, 2021","update":"December 27, 2021","tags":["php","symfony","tdd"],"series":null},"fields":{"slug":"/where-is-TDD/","readingTime":{"minutes":1.655}}},"seriesList":{"edges":[{"node":{"id":"fbead475-1ba0-55c1-986f-e636f28e63e5","fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello world"}}},{"node":{"id":"b247cc5e-3da6-544b-b0e2-b2b7081dd265","fields":{"slug":"/warsawjs-desing-patterns/"},"frontmatter":{"title":"WarsawJs 44 Design patterns"}}},{"node":{"id":"2f6d3669-649d-541e-b324-5397c1ed832e","fields":{"slug":"/about/"},"frontmatter":{"title":"About"}}},{"node":{"id":"59d715d7-36ae-5ec5-a484-8ca5a0eb161f","fields":{"slug":"/bash-training/"},"frontmatter":{"title":"Bash training"}}},{"node":{"id":"bfb5e441-259b-507c-943b-881fd3618102","fields":{"slug":"/bash-training-2/"},"frontmatter":{"title":"Bash training 2"}}},{"node":{"id":"a6c91e31-894a-5e8f-ba50-e7a6081eab36","fields":{"slug":"/summary-2020-plans-for-2021/"},"frontmatter":{"title":"Summary 2020 - plans for 2021"}}},{"node":{"id":"40af6e55-c278-52db-9981-7ece21619c6e","fields":{"slug":"/clean-code-workshop/"},"frontmatter":{"title":"Clean Code workshop"}}},{"node":{"id":"2279682f-3431-5a9b-8232-951fdd913ad3","fields":{"slug":"/python-crash-course/"},"frontmatter":{"title":"Python Crash Course (2nd Edition)"}}},{"node":{"id":"4f5acb7d-1be8-5337-91ab-d6732173e6bc","fields":{"slug":"/simple-object-factory/"},"frontmatter":{"title":"Simple test object factory"}}},{"node":{"id":"3905c451-c52c-580d-9ec8-17379728624e","fields":{"slug":"/where-is-TDD/"},"frontmatter":{"title":"Symfony where is your TDD?"}}},{"node":{"id":"d572f014-1e56-57ef-9f3a-d439e89a35a0","fields":{"slug":"/name-and-tag/"},"frontmatter":{"title":"Give the name and... tag"}}},{"node":{"id":"3a65e50e-87c3-5238-8d14-73e8b69bc3d6","fields":{"slug":"/dw_gym/"},"frontmatter":{"title":"DW Gym - 3 day python challenge"}}},{"node":{"id":"33f95501-bf18-5efa-b9f6-e99ad13bcbde","fields":{"slug":"/symfony-fast-track/"},"frontmatter":{"title":"Symfony Fast Track"}}},{"node":{"id":"d7aa9d73-ab79-5e13-a792-7dc7f77ff0a4","fields":{"slug":"/step-functions-workshop/"},"frontmatter":{"title":"The next step is... AWS Step Functions"}}},{"node":{"id":"0e48ed0c-03da-5695-8ece-d6ec65483624","fields":{"slug":"/phpcon-2022/"},"frontmatter":{"title":"PHPcon Poland 2022"}}},{"node":{"id":"14f466b9-a43e-519e-bca2-7629fb958048","fields":{"slug":"/architecture-hard-parts/"},"frontmatter":{"title":"Compromises"}}},{"node":{"id":"638f6751-4908-5a99-98e4-48eb1eeb4fa3","fields":{"slug":"/kafka-meetup/"},"frontmatter":{"title":"Meetup Kafka KrakÃ³w"}}}]},"previous":{"fields":{"slug":"/simple-object-factory/"},"frontmatter":{"title":"Simple test object factory"}},"next":{"fields":{"slug":"/name-and-tag/"},"frontmatter":{"title":"Give the name and... tag"}}},"pageContext":{"id":"3905c451-c52c-580d-9ec8-17379728624e","series":null,"previousPostId":"4f5acb7d-1be8-5337-91ab-d6732173e6bc","nextPostId":"d572f014-1e56-57ef-9f3a-d439e89a35a0"}},"staticQueryHashes":[],"slicesMap":{}}