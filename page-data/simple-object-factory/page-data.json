{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/simple-object-factory/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Think Big"}},"markdownRemark":{"id":"7cd1331f-b59e-5882-a9a8-addb23beff7b","excerpt":"Today I want to present you very simple idea to creating entities objects for your tests.\nIn a lot of PHP projects we have entities in basic style. I mean these…","html":"<p>Today I want to present you very simple idea to creating entities objects for your tests.\nIn a lot of PHP projects we have entities in basic style. I mean these entities has many properties and getters,\nconstuctor with many requirements parameters. To creating these entities for tests purposes you can create an\ninstance using MockObject (from testing libraries like PHPunit), Object Mother or use simple static factory.</p>\n<p>For example, we have an ‘classic’ entity.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">User</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword type-declaration\">string</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword type-declaration\">string</span> <span class=\"token variable\">$email</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword type-declaration\">bool</span> <span class=\"token variable\">$isActive</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ... and more others</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$email</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">bool</span> <span class=\"token variable\">$isActive</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">email</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$email</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">isActive</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$isActive</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">self</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">email</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">setEmail</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$email</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">self</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">email</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$email</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">isActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">bool</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">isActive</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">setIsActive</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">bool</span> <span class=\"token variable\">$isActive</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">self</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">isActive</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$isActive</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Instead of creating and instance for testing in this way:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'customName'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'customEmail'</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ... over and over</span>\n</code></pre></div>\n<p>We can use and Builder pattern. The example is based on idea which I found in\n<strong>Domain-Driven Design in PHP Book by Carlos Buenosvinos, Christian Soronellas, and Keyvan Akbary</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">UserBuilder</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword type-declaration\">string</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword type-declaration\">string</span> <span class=\"token variable\">$email</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword type-declaration\">bool</span> <span class=\"token variable\">$isActive</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">name</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'CustomName'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">email</span>  <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'CustomEmail'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">isActive</span> <span class=\"token operator\">=</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">withAnName</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">self</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">withAnEmail</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$email</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">self</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">email</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$email</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">withAnIsActive</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">bool</span> <span class=\"token variable\">$isActive</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">self</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">isActive</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$isActive</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">anUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">self</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">User</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">name</span> <span class=\"token punctuation\">,</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">email</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">isActive</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Example of usage</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token class-name static-context\">UserBuilder</span><span class=\"token operator\">::</span><span class=\"token function\">anUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-></span><span class=\"token function\">withAnEmail</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'NewCustomEmail'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-></span><span class=\"token function\">withAnName</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'NewCustomName'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-></span><span class=\"token function\">withAnIsActive</span><span class=\"token punctuation\">(</span><span class=\"token constant boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-></span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It’s ok, but for me the biggest downsize is a duplication all properties from object with we want to prepare to tests. In this case, I should prefer using factories. I’m wondering about how to create\nit at the simplest and easiest way to achieve it. I set the <code class=\"language-text\">consturctor</code> as <code class=\"language-text\">private</code> to prevent\ntry to initialize it directly by <code class=\"language-text\">new</code> keyword because it’s not necessary.</p>\n<p>Look at this one idea:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">SimpleUserFactory</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name type-declaration\">User</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">user</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string single-quoted-string\">'CustomName'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'CustomEmail'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token constant boolean\">true</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// and other properties</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">User</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">User</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">user</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Example of usage</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\">\n<span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token class-name static-context\">SimpleUserFactory</span><span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$secondUser</span> <span class=\"token operator\">=</span> <span class=\"token class-name static-context\">SimpleUserFactory</span><span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-></span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Marcin'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-></span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'custom.marcin@email.test'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-></span><span class=\"token function\">setIsActive</span><span class=\"token punctuation\">(</span><span class=\"token constant boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Maybe, we want to generate other data in each case ? Not problem. The simple example with usage\nof <code class=\"language-text\">Faker</code></p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Faker<span class=\"token punctuation\">\\</span>Factory</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">SimpleFakerUserFactory</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name type-declaration\">User</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$faker</span> <span class=\"token operator\">=</span> <span class=\"token class-name static-context\">Factory</span><span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">user</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>\n            <span class=\"token variable\">$faker</span><span class=\"token operator\">-></span><span class=\"token property\">name</span><span class=\"token punctuation\">,</span>\n            <span class=\"token variable\">$faker</span><span class=\"token operator\">-></span><span class=\"token property\">email</span><span class=\"token punctuation\">,</span>\n            <span class=\"token constant boolean\">true</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">User</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">User</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">user</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name static-context\">SimpleFakerUserFactory</span><span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And other issue. What with the relations between objects ? I think we can easily inject\nobjects with some relations together. In example below I added some relation with other object\n<code class=\"language-text\">Address</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$faker</span> <span class=\"token operator\">=</span> <span class=\"token class-name static-context\">Factory</span><span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">user</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>\n            <span class=\"token variable\">$faker</span><span class=\"token operator\">-></span><span class=\"token property\">name</span><span class=\"token punctuation\">,</span>\n            <span class=\"token variable\">$faker</span><span class=\"token operator\">-></span><span class=\"token property\">email</span><span class=\"token punctuation\">,</span>\n            <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name static-context\">AddressSimpleFactory</span><span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>Of course, we can create this in many others ways. In this post I show how we can play with testing\nobjects. The other thinks is creating more advanced factory to cover some object creation behind some\ninterface to prevent some problems when the rules of initialization of tests object has change.</p>\n<p><em>Thanks you for reading this</em> :)<br>\n<em>Marcin</em></p>","frontmatter":{"title":"Simple test object factory","date":"May 08, 2021","description":null}},"previous":{"fields":{"slug":"/python-crash-course/"},"frontmatter":{"title":"Python Crash Course (2nd Edition)"}},"next":{"fields":{"slug":"/where-is-TDD/"},"frontmatter":{"title":"Symfony where is your TDD?"}}},"pageContext":{"id":"7cd1331f-b59e-5882-a9a8-addb23beff7b","previousPostId":"ca346625-95bd-5494-83af-5d25cdd8d4a7","nextPostId":"a81d2fd7-9314-531a-be97-162eece7f6c3"}},
    "staticQueryHashes": ["4135132960","805692932"]}