{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"Let's kick off meetups in 2024! In this brief post, I aim to provide a snapshot of the presentations. The tools and infrastructure for these solutions constitute a vast topic, and a single post canno…","fields":{"slug":"/kafka-meetup/"},"frontmatter":{"date":"January 21, 2024","title":"Meetup Kafka Kraków","tags":["kafka","meetup"]},"rawMarkdownBody":"\nLet's kick off meetups in 2024!\n\n\nIn this brief post, I aim to provide a snapshot of the presentations. The tools and infrastructure for these solutions constitute a vast topic, and a single post cannot do justice to its explanation.\n\n![presentation_1](./meetup-kafka-krakow.jpg)\n\nI had a opportunity to visit Kraków for Kafka meetup and listen to curious presentations from great two professionalist.\n\n***\n\n#### Building an Event Analytics Pipeline with Kafka, ksqlDB, and Druid.\n\n##### Stack: \n* [Apache Druid](https://druid.apache.org/)\n* [ksqlDB](https://ksqldb.io/)\n* [kafka](https://kafka.apache.org/)  \n\nLet's assume you are using a traditional ETL (Extract - Transform - Load) architecture. What solution to analyse data do you have ? There are many of tools that can help you to visualize loaded data. It's not an issue to use tools like Apache Spark to run query and e.g. aggregate data over some period of time. \n\nWhat's about to analyze data directly form Kafka topic's ? What possible by using Apache Druid.\n\n##### Let's see what you can use for Apache Druid \n\nThe picture below presents possible solutions of architecture and where Apache Druid can be placed.\n\n![https://blog.hellmar-becker.de/2021/11/19/apache-druid-in-the-publishing-industry/](./apache-druid-possibilites.png)\n> source: https://blog.hellmar-becker.de/2021/11/19/apache-druid-in-the-publishing-industry/\n\nLet's go with simple example presented by Hellmar Becker.\n> Example that was presented by using Docker Compose that you can easily run it in your's local environment.\n\n![presentation_3](./kafka_ksqlDB_apache_druid.png)\n\nThan we can use our instance of Apache Druid to analyze data. \n\n***\n\n#### Migration with MirrorMaker 2.0\n\n* [AWS about migration](https://docs.aws.amazon.com/whitepapers/latest/amazon-msk-migration-guide/mirrormaker-2.0-mm2.html)\n* [Microsoft Learn](https://learn.microsoft.com/en-us/azure/hdinsight/kafka/kafka-mirrormaker-2-0-guide)\n\nSecond presentation focused on migrating Kafka cluster from one to another cloud provider. Thanks to the tool like is MirrorMaker, this process has become remarkably straightforward. In general, tool replicates topics, ACL (version 2.0 only) and synchronizing offsets. Thats allows to connect consumers to replicated cluster and then move producing to new one and then remove old cluster. \n\n\n#### What's interested to dive deppper \n* `ksqlDB` - during researching links and materials for this post I found a plenty of interesting knowledge.\n    * [Introduction to ksqkDB](https://talks.rmoff.net/LjZAS7/intr) - video presentationm, demo code, eBook and more.\n\n\nThat's was fruitful meetup. Thanks to organizers and hope to see next time!\n"},{"excerpt":"Last time, I read a great title \"Software Architecture: The Hard Parts: Modern Tradeoff Analysis for Distributed Architectures\"  'Compromise' is one of the main thoughts that runs through while readi…","fields":{"slug":"/architecture-hard-parts/"},"frontmatter":{"date":"December 12, 2023","title":"Compromises","tags":["architecture"]},"rawMarkdownBody":"\nLast time, I read a great title \"Software Architecture: The Hard Parts: Modern Tradeoff Analysis for Distributed Architectures\"\n\n![presentation_1](./hard_parts.jpg)\n\n'Compromise' is one of the main thoughts that runs through while reading this book. Is the choice we make the best one ? We need to consider a number of parameters that are important to us in order to make a choice that fits the challenge we are solving. \n\nIs scalability, consistency or perhaps time efficiency important to us ? \n\nWill we achieve this through choreography or orchestration ?\n\nWhich of our ideas is best ?\n\nThis book took me on a journey through the decisions that programmers in smaller and larger teams make. Sometimes we also make them ourselves. Before coding, it's worthwhile to look at the problem from various angles and try to choose the best \"compromise\".\n\nWhere to buy it ? [ENG](https://www.amazon.pl/Software-Architecture-Tradeoff-Distributed-Architectures/dp/1492086894)\n[PL](https://helion.pl/ksiazki/zlozone-zagadnienia-architektury-oprogramowania-jak-analizowac-kompromisy-i-podejmowac-trudne-decyz-neal-ford-mark-richards-pramod-sadalage-zhamak,zlozag.htm#format/d)\n"},{"excerpt":"This year conference PHPcon Poland 2022 was so special for me. Everything because I presented a topic\n\"Memory leaks in long processes - practice\". On material I worked with Łukasz Jaworski. For me an…","fields":{"slug":"/phpcon-2022/"},"frontmatter":{"date":"November 15, 2022","title":"PHPcon Poland 2022","tags":["conference"]},"rawMarkdownBody":"\n![presentation_1](./presentation_1.jpg)\n\nThis year conference [PHPcon Poland 2022](https://2022.phpcon.pl/) was so special for me. Everything because I presented a topic\n\"Memory leaks in long processes - practice\". On material I worked with [Łukasz Jaworski](https://www.linkedin.com/in/%C5%82ukasz-jaworski-977078130). For me and Łukasz\nit was the first time as presenters. That experience gives me a lot of confidence and bravery. As a programmer \nI always wanted to do something for community by first open source commits and share knowledge, my point\nof see. \n\n![presentation_2](./presentation_2.jpg)\n\nRepository with examples: https://github.com/lljaworski/memory_leak_php\n\nPresentation on slides: \n<iframe src=\"https://www.slideshare.net/slideshow/embed_code/key/GnjXvRToOdqeIi?hostedIn=slideshare&page=upload\" width=\"476\" height=\"400\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe>\n\nI've got plan to write blog posts about this topic.\n\n\n\n\n"},{"excerpt":"Last time I participated in workshops about AWS Step Functions. This service provided by AWS was created for implementing flow of\nour application and close the paths in state machine. This service ca…","fields":{"slug":"/step-functions-workshop/"},"frontmatter":{"date":"June 28, 2022","title":"The next step is... AWS Step Functions","tags":["aws"]},"rawMarkdownBody":"\nLast time I participated in workshops about [AWS Step Functions](). This service provided by AWS was created for implementing flow of\nour application and close the paths in [state machine](https://en.wikipedia.org/wiki/Finite-state_machine). This service can be created and maintained from Serverless Framework which \nis one of the most popular frameworks to manage cloud resources and applications. The mentors created a repository to start our journey and resolve tasks during 2 days workshop.\n\n### Advantages of step functions:\n- allow us to manage many of services in our cloud applications (ex. lambdas)\n- visualize steps and executed path\n- easily to find logs, passed inputs/outputs\n- ASL to declare step flow\n- usage with frameworks as Serverless Framework\n- developing locally (Serverless framework with plugin)\n- move our thinking to implement our application as small possible steps\n- possible to usage other aws services from steps declaration\n- ...\n\nStarted repository:  https://github.com/TheSoftwareHouse/tsh-academy-serverless  \nMy repository: https://github.com/MarcinGladkowski/aws-step-functions-workshops  \nStep functions and Severless framework: https://www.serverless.com/guides/aws-step-functions  \n\n#### I will go through some examples/features \n\n### ASL - Amazon State Language\nMost of examples in the documentation are in JSON bu using SF we can describe it in __yml__\n\n#### Step types\n\nThe powerful of ASF we can see on more complicated flow. Below You can see the __Choice__ type. Similary to __switch()__ or __match()__\nfunctions in programming languages. This is our first step of flow. As we can se there are some other keywords as `StringEquals` to \ncompare returned parameter.\n```yml\nComment: \"Scan user CV document for data\"\nStartAt: checkFileType\nStates:\n  checkFileType:\n    Type: Choice\n    Choices:\n      - Variable: $.extension\n        StringEquals: \"txt\"\n        Comment: Is a text file?\n        Next: copyFileToExtractedBucket\n    Default: extractData\n```\n__Choice__ type allows to use other keywords to compare input.\n\nFor example __NumericGreaterThan__ for numeric comparison\n\n```yml\ncheckScore:\n    Type: Choice\n    Choices:\n      - Variable: $.calculatedScore\n        NumericGreaterThan: 100\n        Comment: Is a match?\n        Next: saveToMatchedBucket\n    Default: saveToRejectedBucket\n```\n\n#### Calling services\n\nThe next one will be step with calling other service like __textract:analyzeDocument__. \n\nFull list of integrations:\n https://docs.aws.amazon.com/step-functions/latest/dg/supported-services-awssdk.html#supported-services-awssdk-list\n\nAWS service we define like __arn:aws:states:::aws-sdk:[service]:[apiAction]__\n\n```yml\n  extractData:\n    Type: Task\n    Resource: arn:aws:states:::aws-sdk:textract:analyzeDocument\n    Parameters:\n      Document:\n        S3Object:\n          Bucket: !Ref inputBucket\n          Name.$: $.key\n      FeatureTypes:\n        - TABLES\n        - FORMS\n    ResultPath: \"$.taskresult\"\n    Next: extractTe\n```\n\n#### Parallel step execution\n\nThe best thing is that we haven't wait for all services using language mechanism of \nasynchronous execution. I this case the result of all __parallel__ steps will be passed\nto __calculateScore__ at once, like one event in lambda handler. \n\n```yml\n  checkExperience:\n    Type: Parallel\n    Branches:\n      - StartAt: checkNodeExperience\n        States:\n          checkNodeExperience:\n            Type: Task\n            Resource: !GetAtt checkNodeExperience-lambda.Arn\n            End: true\n      - StartAt: checkCloudExperience\n        States:\n          checkCloudExperience:\n            Type: Task\n            Resource: !GetAtt checkCloudExperience-lambda.Arn\n            End: true\n      - StartAt: checkItExperience\n        States:\n          checkItExperience:\n            Type: Task\n            Resource: !GetAtt checkItExperience-lambda.Arn\n            End: true\n      - StartAt: checkExcludeLists\n        States:\n          checkExcludeLists:\n            Type: Task\n            Resource: !GetAtt checkExcludeLists-lambda.Arn\n            End: true\n    Next: calculateScore\n```\n\nFull workflow implemented on workshop\n\n![step_functions_1](step_functions_1.png)\n\nOf course, the step functions has a lot of more features like graphical editor, executing in loops and others.\n\nBest,\nMarcin"},{"excerpt":"Continuing learn the Symfony framework I'm always looking for new possibilities and ideas. Learning the Symfony framework we have, as in other \ntools a few ideas how to get main features/good practic…","fields":{"slug":"/symfony-fast-track/"},"frontmatter":{"date":"May 21, 2022","title":"Symfony Fast Track","tags":["php","symfony"]},"rawMarkdownBody":"\nContinuing learn the Symfony framework I'm always looking for new possibilities and ideas. Learning the Symfony framework we have, as in other \ntools a few ideas how to get main features/good practices. We can read great [documentation](https://symfony.com/doc/current/index.html), register in [SymfonyCasts](https://symfonycasts.com/), \ndo own project, watch a lot of videos from Symfony conferences, and of course attend in these conferences but we have also another way to get some knowledge and get main features. \n\nIt's [Symfony Fast Track book](https://symfony.com/book)\n\n![symfony_fast_track_book](symfony_fast_track.png)\n\nI decided to go through everything step by step. What I learned/reminded?\n\n### Xdebug extra option\n\nBy adding `xdebug.file_link_format` option you can specify your IDE, and when Symfony displays error stack trace you can go to file and line straight away.\n\n### Recipes additional behavioral\n\nMarks like for ex: `###< doctrine/doctrine-bundle ###` were added by the recipes/packages. Then is easy to remove also when package will be removed.\n\nThe recipes also adding `docker-compose` configuration for new containers when we need a database.\n\n```yml\n###> symfony/mailer ###\n  mailer:\n    image: schickling/mailcatcher\n    ports: [1025, 1080]\n###< symfony/mailer ###\n```\n\n### Packages are upgrading\n\nIn a lot of projects I'm using older packages. Now I realized the some common packages have some major upgrades. Sometime is good to start new project to know the newest changes. It can be frustrating sometimes.\n\nExecute migrations with newer version on command `php bin/console doctrine:migrations:execute 'DoctrineMigrations\\Version20220418170145' --up`\n\nPreviously was (version 2): \n`php bin/console doctrine:migrations:execute 20220418170145 --up`\n\n### Dependency Injection Container\n\nEntities are Data Object and its not be right to inject them as services\n\nPreviously auto generated event subscriber was instantiated by framework because of the interface which class implements. Interface tells the framework how to create the service.\n\n[Symfony Services Cheat Sheet](https://github.com/andreia/symfony-cheat-sheets/blob/master/Symfony4/services_en_42.pdf)\n\n### Testing\n\nWriting **dataProviders** functions You haven't returned a simple array. It's an iterable type hint. It's mean you can simply write a more readable generator using the yield keyword instead of associative arrays. For ex.\n\n```php\npublic function someDataProvider(): iterable``\n{\n  // buid some data\n  yield 'key' => 'data1'\n\n  yield 'key' => 'data2'\n}\n```\n\nIn Symfony components like http you can find classes to mock it easily. For ex. ```MockHttpClient```\n\nCreating a separate DB for tests, for development just create new database on db container.\nCommand: ```php bin/console doctrine:database:create --env=test``` creates test database\n\n```bash\nCreated database \"app_test\" for connection named default\n```\nthen you can execute migrations:\n```bash\n php bin/console doctrine:migrations:migrate -n --env=test\n```\n\n### Caching\n\nMethod `setSharedMaxAge()` using for reverse proxy cache\n\nMethod `setMaxAge()` is usable for browser cache\\\n\nCache header x-symfony-cache: on statuses: `:miss, :fresh, :store`\n\nHttp method `PURGE`. This method doesn't exists in RFC but is implemented caching tools like Varnish\n\n### Explore Symfony components\n\nIn this tutorial I had a chance to try the component [Workflow](https://symfony.com/doc/current/components/workflow.html). It's very \nhelpful to manage workflow or finite state machine. This example shows me there are a lot of Symfony Components which resolved the most common problems. Don't reinvent the wheel and check if someone implement what you want to achieve. \n\n### Be lazy and use MakerBundle\n\nInstead of writing classes/services by hand, it's great do generate them. If the class is relatively easily there is no problem. What if you want to create\nspecialized event listener? It's an elegant solution which really helps you.  \n\nComponent with interactive prompts show you all possibilities:\n\n```bash\n Choose a class name for your event subscriber (e.g. ExceptionSubscriber):\n > ExampleSubscriber\n\n Suggested Events:\n * kernel.controller (Symfony\\Component\\HttpKernel\\Event\\ControllerEvent)\n * kernel.controller_arguments (Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent)\n * kernel.exception (Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent)\n * kernel.finish_request (Symfony\\Component\\HttpKernel\\Event\\FinishRequestEvent)\n * kernel.request (Symfony\\Component\\HttpKernel\\Event\\RequestEvent)\n * kernel.response (Symfony\\Component\\HttpKernel\\Event\\ResponseEvent)\n * kernel.terminate (Symfony\\Component\\HttpKernel\\Event\\TerminateEvent)\n * kernel.view (Symfony\\Component\\HttpKernel\\Event\\ViewEvent)\n\n  What event do you want to subscribe to?:\n\n```\n\n### Additional tools like ApiPlatform and EasyAdminBundle\n\nAre you creating API or management panel, which is a common implementation ? Don't write it from a scratch. \nCheck the most powerful packages like [API Platform](https://api-platform.com/) or [EasyAdminBundle](https://github.com/EasyCorp/EasyAdminBundle). \n\nRegards\nMarcin"},{"excerpt":"Today I reveived certyficate of finish 3 day python challenge organized by Data Workshop. The challenge was in december of previous year but I think this is\na good idea to repeat what we trained. The…","fields":{"slug":"/dw_gym/"},"frontmatter":{"date":"January 18, 2022","title":"DW Gym - 3 day python challenge","tags":["python","machine learning"]},"rawMarkdownBody":"\n![certyficate](./certyficate.png)\n\nToday I reveived certyficate of finish 3 day python challenge organized by Data Workshop. The challenge was in december of previous year but I think this is\na good idea to repeat what we trained. The main topic on challenge was Pandas library. I think it's the most popular library in Python to work with data.\n\nIn this post I will show all commands used in challenge exercises. Also, I will write how to start with Pandas and how to run your code with some data \nand try to execute these commands. \n\nFirstly, we need some data and environment A lot of datasets we can find on **kaggle.com**. I choosed set with [video games](https://www.kaggle.com/rush4ratio/video-game-sales-with-ratings). \nTo eaisly work with data we can choose Jupyter. The fastest way is using it with docker. \n\nHow to run it ? Just execute a command:\n```bash\ndocker run --rm -p 8888:8888 -e JUPYTER_ENABLE_LAB=yes -v ${PWD}:/home/jovyan/work jupyter/datascience-notebook\n```\n_Remember: ${PWD} evaluated to current directory. I execute command in directory when I save dataset file._ \n\n### Working with Pandas\nWith short explanations.\n\n_Import library to using it. `pd` is only alias, but using very often and treat as good practice._\n```python\nimport pandas as pd\n```\n\n---\n\n_Load csv dataset. Of course datasets can be in other formats like xlsx. Typing only `pd` and executed shows result like `print()` function_\n```python\ndf = pd.read_csv('./work/Video_Games_Sales_as_at_22_Dec_2016.csv')\ndf\n```\n![dw_gym_1](./dw_gym_1.png)\n\n---\n\n_To show some rows without printing everything_\n```python\ndf.head()\n```\n![dw_gym_2](./dw_gym_2.png)\n\n---\n\n_The numbers of (rows, columns)_\n```python\ndf.shape\n    (16719, 17)\n```\n\n---\n\n_For each column we can display unique values. In this example for `Platform` column_\n```python\ndf.Platform.unique()\n```\n![dw_gym_3](./dw_gym_3.png)\n\n---\n\n_Fuction to count how many rows have a unique value for column. In this example for `Platform`_\n```python\ndf.Platform.value_counts()\n```\n![dw_gym_4](./dw_gym_4.png)\n\n---\n\n_Function apply on data frame alows to work with each row. In this example we not doing anything. Just returned `row`_\n```python\ndf.apply(lambda row: row, axis=1)\n```\n![dw_gym_5](./dw_gym_5.png)\n\n---\n\n_The same like above but we returning `keys` and it's mean - column names_\n```python\ndf.apply(lambda row: row.keys(), axis=1)\n```\n![dw_gym_6](./dw_gym_6.png)\n\n---\n\n_Choosing only one column from row_\n```python\ndf.apply(lambda row: row['Platform'], axis=1)\n```\n![dw_gym_7](./dw_gym_7.png)\n\n---\n\n_Add statement to check data. It's evaluate to `True` and thats why we see only booleans on output_\n```python\ndf.apply(lambda row: row['Global_Sales'] > 30, axis=1)\n```\n![dw_gym_8](./dw_gym_8.png)\n\n---\n\n_Mix using `apply()` and `value_counts()`_\n```python\ndf['Best_Global_30'] = df.apply(lambda row: row['Global_Sales'] > 30, axis=1)\ndf['Best_Global_30'].value_counts()\n```\n![dw_gym_9](./dw_gym_9.png)\n\n---\n\n_Get `value_counts()` of column and choose only by statement. Pandas work on this data as a `Series` of data. Details in documentation._\n```python\ngenre_values = df['Genre'].value_counts()\n\ntop_ten_genre_values = genre_values[genre_values > 1000]\ntop_ten_genre_values\n```\n![dw_gym_10](./dw_gym_10.png)\n\n---\n\n_Using filtered only top values we can work again with main data_\n```python\ngenre_norm = df[\"Genre\"].map(lambda x: x if x in top_ten_genre_values else \"other\")\ngenre_norm.value_counts()\n```\n![dw_gym_11](./dw_gym_11.png)\n\n---\n\n_Grouping and aggregate functions. Pandas contains data structures like `pivot_table`, and allows us to count values like minumum, maximum etc_\n```python\npd.pivot_table(df, values=[\"Global_Sales\"], index=[\"Name\"]).sort_values(by=(\"Global_Sales\"), ascending=False)\n```\n![dw_gym_12](./dw_gym_12.png)\n\n\n```python\n(df[[\"Global_Sales\", \"Genre\"]]\n    .groupby(\"Genre\")\n    .agg([\"mean\", \"median\", \"min\", \"max\", \"std\", \"size\"])\n)\n```\n![dw_gym_13](./dw_gym_13.png)\n\n\nThanks for reading this. It was a small recap of workshop exercises.\n\nMarcin\n"},{"excerpt":"When a child birth one of the first thing is give a name! You should do the same with yours images! Why I writing about this ? \nIf you are not becarefule with images names and tags you can do the mes…","fields":{"slug":"/name-and-tag/"},"frontmatter":{"date":"January 06, 2022","title":"Give the name and... tag","tags":["docker"]},"rawMarkdownBody":"\nWhen a child birth one of the first thing is give a name! You should do the same with yours images! Why I writing about this ? \nIf you are not becarefule with images names and tags you can do the mess with our local docker images storage. Sometimes you \nhave to prepare different images for some features/branches/deploys.\n\nLet's prepare our dockerized website.\n\n_Website:_\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Title</title>\n\n</head>\n<body>\n<h1>Hello World</h1>\n</body>\n```\n\n_Image to run container responsible for displaing it:_\n```dockerfile\nFROM nginx\n\nCOPY index.html /usr/share/nginx/html/index.html\n```    \n\nOK, It's time to building. Build first version by command `docker build .` Then we want to something change in the our website and build again by `build` command. Which images we have ?\n\n\n_Console output:_\n```sh\nroot@local:~/project$ docker images\nREPOSITORY   TAG       IMAGE ID       CREATED              SIZE\n<none>       <none>    c8af32463c20   5 seconds ago        141MB\n<none>       <none>    f1663715c693   About a minute ago   141MB\nnginx        latest    605c77e624dd   8 days ago           141MB\n```\nAs you see there are a `<none>` words. It's not helpful when you want to pick up specific image.\nWhy we have images without **REPOSITORY** and **TAG** ? It's caused by build image without `-t` option These images were built by command ```docker build . ``` How we can fix it or how we can build images ? Firstival we can `tag` image after build by command `docker tag`. \n\nFor example `docker tag f1663715c693 website:1.0` and `docker tag f1663715c693 website:1.2`.\n\n_Console output_\n```sh\nroot@local:~/project$ docker images\nREPOSITORY   TAG       IMAGE ID       CREATED          SIZE\n<none>       <none>    c8af32463c20   16 minutes ago   141MB\nwebsite      1.2       c8af32463c20   21 minutes ago   141MB\nwebsite      1.0       f1663715c693   22 minutes ago   141MB\nnginx        latest    605c77e624dd   8 days ago       141MB\n```\nBut this needs from us additional action. Remember, we can do it while building an new image. \n\n```sh \ndocker build -t website:1.3 .\n```\nVery interesting option is adding multiple specific tags at once. The case with `latest` is very helpful to tag a version of image and set it at latest. \n```sh\ndocker build -t website:1.3 -t website:latest .\n```\n\nFull documentation about tagging we can find on https://docs.docker.com/engine/reference/commandline/tag.  \n\n\n\n\n\n\n\n"},{"excerpt":"Last months I trying to following on rule \"Write tests first!\". Even if the task is small or trivial I trying to test it. Why I didn't working like this ?\nI have a mindset about tests: I have to setu…","fields":{"slug":"/where-is-TDD/"},"frontmatter":{"date":"December 27, 2021","title":"Symfony where is your TDD?","tags":["php","symfony","tdd"]},"rawMarkdownBody":"\nLast months I trying to following on rule \"Write tests first!\". Even if the task is small or trivial I trying to test it. Why I didn't working like this ?\nI have a mindset about tests: I have to setup framework for it - it takes time, I have to write a lot of extra code and keep it SOLID as production code - it takes time,\nI have to maintain it - it takes time! and so on... But what you receive ? What is a holy grail of having tests ? It's also time! You save it when you have change\nbusiness rules, or you fixed a bug. One command and status of application is displaying for you - SUCCES or FAILURE.\n\nbut ... Let's start writing tests for new class (service)\n\n```php\nclass SomeService\n{\n    public function execute(): boolean\n}\n```\n\nOh it's look great!\n\nNow, we will write tests for it. Usually, I writing tests for instantiating class by autowiting from Symfony framework.\n\nok! Challenge accepted!\n\n```php\n\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\KernelTestCase;\n\nclass SomeServiceTest extends KernelTestCase\n{\n    protected function setUp(): void\n    {\n        self::bootKernel();\n    }\n\n    public function testShouldReturnInstanceOfService(): void\n    {\n        self::assertInstanceOf(\n            SomeService::class,\n            self::$container->get(SomeService::class)\n        );\n    }\n\n}\n```\n\nAnd let's try to run this test by\n\n```shell\nphp bin/console --env=test\n```\n\nThen we get:\n\n```shell\nSymfony\\Component\\DependencyInjection\\Exception\\ServiceNotFoundException :\nThe \"App\\Service\\SomeService\" service or alias has been removed or inlined when the container was compiled.\nYou should either make it public, or stop using the container directly and use dependency injection instead.\n```\n\nFirst time, when I received this exception I tried to find an error in services configuration but I found nothing, because everyting should be configured automaticaly (autowiring).\n\nHow to resolve it fast and efficiently ?\n\nJust add this testing class to some other, where it will be using.\n\n```php\nclass IndexController extends AbstractController\n{\n    #[Route('/', name: 'index')]\n    public function index(SomeService $service): Response\n    {\n        return new Response('OK');\n    }\n}\n\n```\n\nAnd then tests will start working and autowiring start returning this service!\n"},{"excerpt":"Today I want to present you very simple idea to creating entities objects for your tests.\nIn a lot of PHP projects we have entities in basic style. I mean these entities has many properties and gette…","fields":{"slug":"/simple-object-factory/"},"frontmatter":{"date":"May 08, 2021","title":"Simple test object factory","tags":["php"]},"rawMarkdownBody":"\nToday I want to present you very simple idea to creating entities objects for your tests.\nIn a lot of PHP projects we have entities in basic style. I mean these entities has many properties and getters,\nconstuctor with many requirements parameters. To creating these entities for tests purposes you can create an\ninstance using MockObject (from testing libraries like PHPunit), Object Mother or use simple static factory.\n\nFor example, we have an 'classic' entity.\n\n```php\nclass User\n{\n    private string $name;\n    private string $email;\n    private bool $isActive;\n\n    // ... and more others\n\n    public function __construct(string $name, string $email, bool $isActive)\n    {\n        $this->name = $name;\n        $this->email = $email;\n        $this->isActive = $isActive;\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    public function setName(string $name): self\n    {\n        $this->name = $name;\n\n        return $this;\n    }\n\n    public function getEmail(): string\n    {\n        return $this->email;\n    }\n\n    public function setEmail(string $email): self\n    {\n        $this->email = $email;\n\n        return $this;\n    }\n\n    public function isActive(): bool\n    {\n        return $this->isActive;\n    }\n\n    public function setIsActive(bool $isActive): self\n    {\n        $this->isActive = $isActive;\n\n        return $this;\n    }\n}\n```\n\nInstead of creating and instance for testing in this way:\n\n```php\n$user = new User('customName', 'customEmail', true)\n// ... over and over\n\n```\n\nWe can use and Builder pattern. The example is based on idea which I found in\n**Domain-Driven Design in PHP Book by Carlos Buenosvinos, Christian Soronellas, and Keyvan Akbary**\n\n```php\nclass UserBuilder\n{\n    private string $name;\n    private string $email;\n    private bool $isActive;\n    // ...\n\n    public function __construct()\n    {\n        $this->name = 'CustomName';\n        $this->email  = 'CustomEmail';\n        $this->isActive = true;\n        // ...\n    }\n\n    public function withAnName(string $name): self\n    {\n        $this->name = $name;\n\n        return $this;\n    }\n\n    public function withAnEmail(string $email): self\n    {\n        $this->email = $email;\n\n        return $this;\n    }\n\n    public function withAnIsActive(bool $isActive): self\n    {\n        $this->isActive = $isActive;\n\n        return $this;\n    }\n\n    public static function anUser(): self\n    {\n        return new self();\n    }\n\n    public function build(): User\n    {\n        return new User($this->name ,$this->email, $this->isActive);\n    }\n}\n```\n\n**Example of usage**\n\n```php\nUserBuilder::anUser()\n    ->withAnEmail('NewCustomEmail')\n    ->withAnName('NewCustomName')\n    ->withAnIsActive(false)\n    ->build();\n```\n\nIt's ok, but for me the biggest downsize is a duplication all properties from object with we want to prepare to tests. In this case, I should prefer using factories. I'm wondering about how to create\nit at the simplest and easiest way to achieve it. I set the `consturctor` as `private` to prevent\ntry to initialize it directly by `new` keyword because it's not necessary.\n\nLook at this one idea:\n\n```php\nclass SimpleUserFactory\n{\n    private User $user;\n\n    private function __construct()\n    {\n        $this->user = new User(\n          'CustomName',\n            'CustomEmail',\n            true\n        );\n        // and other properties\n    }\n\n    public static function create(): User\n    {\n        return (new self())->user();\n    }\n\n    private function user(): User\n    {\n        return $this->user;\n    }\n}\n```\n\n**Example of usage**\n\n```php\n\n$user = SimpleUserFactory::create();\n\n$secondUser = SimpleUserFactory::create()\n    ->setName('Marcin')\n    ->setEmail('custom.marcin@email.test')\n    ->setIsActive(false);\n```\n\nMaybe, we want to generate other data in each case ? Not problem. The simple example with usage\nof `Faker`\n\n```php\nuse Faker\\Factory;\n\nclass SimpleFakerUserFactory\n{\n    private User $user;\n\n    private function __construct()\n    {\n        $faker = Factory::create();\n\n        $this->user = new User(\n            $faker->name,\n            $faker->email,\n            true\n        );\n    }\n\n    public static function create(): User\n    {\n        return (new self())->user();\n    }\n\n    private function user(): User\n    {\n        return $this->user;\n    }\n}\n\nSimpleFakerUserFactory::create();\n```\n\nAnd other issue. What with the relations between objects ? I think we can easily inject\nobjects with some relations together. In example below I added some relation with other object\n`Address`.\n\n```php\n// ...\nprivate function __construct()\n    {\n        $faker = Factory::create();\n\n        $this->user = new User(\n            $faker->name,\n            $faker->email,\n            true,\n            AddressSimpleFactory::create()\n        );\n    }\n// ...\n```\n\nOf course, we can create this in many others ways. In this post I show how we can play with testing\nobjects. The other thinks is creating more advanced factory to cover some object creation behind some\ninterface to prevent some problems when the rules of initialization of tests object has change.\n\n_Thanks you for reading this_ :)  \n_Marcin_\n"},{"excerpt":"Python Crash Course (2nd Edition) - Book review From last few months I learn a Python. The first step of learning\nnew programming language was a watching some tutorials of basics.\nAt first glance the…","fields":{"slug":"/python-crash-course/"},"frontmatter":{"date":"March 06, 2021","title":"Python Crash Course (2nd Edition)","tags":["python"]},"rawMarkdownBody":"\n### Python Crash Course (2nd Edition) - Book review\n\nFrom last few months I learn a Python. The first step of learning\nnew programming language was a watching some tutorials of basics.\nAt first glance the Python have a plenty of good things like super\nsimple syntax, code formatting, managing virtual environments.\n\nThen I decided to get some simple projects. Thanks for my company for entertainment budget. I bought a this book.\n\nThe book has two main parts. At the first we learning about\nbasic scripts. Just started form declaring variables, loops, imports.\nBasically, about syntax and types for very simple scripts. The language (I've got polish translation) of describing how to write a script is for people who never coding. I've just learn something new but describing by author over and over the same can be boring for\nsomeone who actually works as programmer. To be fair, I decided to\nbuy this book and I'm very happy.\n\nThe second part is about projects. The main projects are game about shooting to aliens, analyzing data with visualization and web application. I've never wrote desktop game but game using PyGame\nlibrary was very fun for me. There is the same point as in previous\npart. After numerous of pages the developing of game was a little boring.\n\nNext part about visualizations data shows me why the Python is often using to this tasks. Libraries like matplotlib, plotly doing a great job and usage of them are not complicate but they have a lot of\noptions.\n\n![crash_course_1](./crash_course_1.png)\n\nThe last project was a web application to monitors progress of learning. I'm a PHP developer and I was surprized how Django is similar to other frameworks from another programing language.\nThere are the same ideas like cli commands, views, controllers. The\nlast step was a developing this app on Heroku, and was very interesting for me.\n\n![crash_course_2](./crash_course_2.png)\n\nIn summarize. The book is quite good but for beginners. If you have\nsome experience in programming this lecture can be boring for you. The author elaborate some topis very wide - I mean a lot of times and many of pages.\n\nRegards\n\nMarcin\n"},{"excerpt":"At the 13Th of December I participated in Clean Code and Architecture workshops done by Docplanner. Yep, very relevant topic\nfor each developer. The practicing of writing the clean code is the one of…","fields":{"slug":"/clean-code-workshop/"},"frontmatter":{"date":"January 24, 2021","title":"Clean Code workshop","tags":["clean code"]},"rawMarkdownBody":"\nAt the 13Th of December I participated in Clean Code and Architecture workshops done by Docplanner. Yep, very relevant topic\nfor each developer. The practicing of writing the clean code is the one of most grateful think for you, colic and your business.\nThe clean code allows you to make easy changes, maintainable things which you have time to forget. This is the skill to practicing\nevery day.\n\nLet's focus on workshop. The repository which was prepared by **Docplanner Tech** you can find [here](https://github.com/MarcinGladkowski/clean-code-architecture)\n\nLet's focus on content!\n\n# Object calisthenics\n\nTo get more knowledge about that I found a great blog post of **Willam Durand** -> [here](https://williamdurand.fr/2013/06/03/object-calisthenics/)\nEach rule looks great, but using it can be more complicate.\n\nIn the shortest way. It's about follow to 9 rules:\n\n1. Only One Level Of Indentation Per Method\n2. Don’t Use The ELSE Keyword\n3. Wrap All Primitives And Strings\n4. First Class Collections\n5. One Dot Per Line\n6. Don’t Abbreviate\n7. Keep All Entities Small\n8. No Classes With More Than Two Instance Variables\n9. No Getters/Setters/Properties\n\nBelow I described some examples of providing some of these rules on workshop and this test project.\n\n### Only One Level Of Indentation Per Method\n\nIt's a great advises except SOLID, KISS etc. I always try to avoid to many levels and **indentation** and\nusing **else** block.\n\nToo long methods and functions are not a very simple and clear to read. We should to try to extract block of codes to\nsimple methods. Looks simple but there is a lot of patterns of refactoring like **extract function** from [Refactoring Book](https://refactoring.com/)\n(Martin Fowler).\n\n_Pro tip: If you are using PhpStorm there is shortcut to [extract code as function](https://www.jetbrains.com/help/phpstorm/extract-method.html)_\n\nCommit: [acb1aea](https://github.com/docplanner-workshop/clean-code-architecture/commit/acb1aea47fdbb802b2717b0c249ff6bcbeebedd5)\n![diff_3](./diff_3.png)\n\n### Don't Use The ELSE Keyword\n\nThis simple change cam simplify a code to read and testing it. Less cyclomatic and cognitive complexity.\nBut we don't forget about _return_ statement, because this technique allows us to safely execute code.\n\nCommit: [a566791](https://github.com/docplanner-workshop/clean-code-architecture/commit/a566791fb121bc6469447a5ae400e682fe5a6bab)\n![diff_2](./diff_2.png)\n\nAnother example of this technique. It's mean to fast quit from method when relevant data are missing.\n\n```php\npublic function doSomething($params): ?someType\n{\n    if (empty($params)) {\n        return null;\n    }\n}\n```\n\n### Don't Abbreviate\n\nUsing a meaningful variables names can be very helpful. What's we have done with code:\n[0d1b74f](https://github.com/docplanner-workshop/clean-code-architecture/commit/0d1b74f3cb706a98f870421bba34061bcf5b1def?branch=0d1b74f3cb706a98f870421bba34061bcf5b1def&diff=unified)\n[120a26e](https://github.com/docplanner-workshop/clean-code-architecture/commit/120a26ed7d1da0a31a983341419d2560b09ac52a?branch=120a26ed7d1da0a31a983341419d2560b09ac52a&diff=unified)\n\nMeaningful names changes a readability a lot:\n\n![diff_1](./diff_1.png)\n\n### Wrap All Primitives And Strings\n\nWhen I heard this my first thought was - Value Object. The convention of [Value Object](https://martinfowler.com/bliki/ValueObject.html) comes from DDD (Domain Driven Design) techniques. Shortly, It's about to wrap meaningful values - usually they can be store in primitive values.\n\n```php\n<?php declare(strict_types=1);\n\nnamespace App\\Model;\n\nclass Specialization\n{\n    private string $name;\n\n    public function __construct(string $name)\n    {\n        $this->name = $name;\n    }\n\n     public function name(): string\n     {\n         return $this->name;\n     }\n\n     public function equals(Specialization $specialization): bool\n     {\n         return $this->name === $specialization->name();\n     }\n}\n```\n\n### No Getters/Setters/Properties\n\nSince I trying to create immutable objects like **VO** there are any getters and setters. The state is usually\npassing by _\\_\\_constructor_. The same thing is about to _wrapping all primitives_. We can follow this rule by using DTOs.\n\n```php\nclass Doctor\n{\n    private string $firstName;\n    private string $lastName;\n    private Specialization $specialization;\n\n    public function __construct(string $firstName, string $lastName, Specialization $specialization)\n    {\n        $this->firstName = $firstName;\n        $this->lastName = $lastName;\n        $this->specialization = $specialization;\n    }\n\n    public function firstName(): string\n    {\n        return $this->firstName;\n    }\n\n    public function lastName(): string\n    {\n        return $this->lastName;\n    }\n\n    public function specialization(): Specialization\n    {\n        return $this->specialization;\n    }\n}\n```\n\nSome rules can be hard to follow them for example this one about _only two instance variables_. Usually in bigger project exist specialized services\ndoing to much things (the SRP - Single Responsibility Rule is break also) with a lot of some dependencies.\n\n# Architecture\n\nI am sure, all web developers knows at least one architecture pattern MVC (Model-View-Controller). When I write my first\ncode as a Junior developer I pasted a lot of code to controllers. I think a lot of developers made mistake like this.\nIf you get some knowledge and experience, you will see the bad side of this solution. In my opinion each should meet this\nproblem to saw what's wrong with this architecture. I don't say it's bad patters but have some limitations. Many of developers\ncannot have idea _where should I put this code?_ because they have only three official layers: _model, controller, view_.\nWhat's the most dangerous to put all logic code into controller? Then developers put business logic also to controller,\nmodel and view!. Developing in this way makes a lot off mess in our code and if we want to apply some little change\nwe have to look it very careful! The code isn't reusable.\n\nWhat we can do in this case ?\n\nI hope you heard about **SOLID** principles. These rules are independent from programming languages. Only interesting thing is\nthis is the most popular requirement question for programmer. If you don't know this rules, hurry up! You should memorize it.\n\nUsing SRP (Single Responsibility Principle) and DI (Dependency Inversion) we can easily decouple our logic and relation between\nclasses.\n\nSome steps of refactoring to make our code clean:\n\n- Moving methods to external class (service)\n- Not using lower level dependencies in a service\n- Depend in Abstractions, not on implementations (ex. create and interface)\n- Moving out Request handling out of the Controller\n- Entities refactoring (no getters/setters, guard invariants (valid domain state)...)\n\nLook at this example controller, please. Looks good, but can we do better ?\n\n```php\nclass Controller extends AbstractController\n{\n    public function index()\n    {\n        return new JsonResponse('ReallyDirty API v1.0');\n    }\n\n    /**\n     * @Route(\"/doctor\", methods={\"POST\"})\n     * @param Request $request\n     * @return JsonResponse\n     */\n    public function addDoctorAction(Request $request)\n    {\n        $doctor = $this->createDoctorFromRequest(\n            $request->get('firstName'),\n            $request->get('lastName'),\n            $request->get('specialization')\n        );\n\n        $this->save($doctor);\n\n        return new JsonResponse(['id' => $doctor->getId()]);\n    }\n\n    /**\n     * @Route(\"/doctor\", methods={\"GET\"})\n     * @param Request $request\n     * @return JsonResponse\n     */\n    public function getDoctorAction(Request $request)\n    {\n        $doctor = $this->getDoctor($request->get('id'));\n\n        if (!$doctor) {\n            return new JsonResponse([], 404);\n        }\n\n        return new JsonResponse(\n            [\n                'id' => $doctor->getId(),\n                'firstName' => $doctor->getFirstName(),\n                'lastName' => $doctor->getLastName(),\n                'specialization' => $doctor->getSpecialization(),\n            ]\n        );\n    }\n\n    // and more and more...\n```\n\nWhat the cons of this solution:\n\n- If have a lot of endpoints it can be verrryy long class (thousands lines of code...)\n- The controller depends of Request class.\n- We have to decide which type response we want JSON, XML or something else.\n- We have to parse incoming data, but maybe it not only from HTTP request ?\n\nThere is a time for **Action Domain Responder**\n\nThis architecture pattern is quite new for me and was I found it isn't very old (like MVC - 1979).\nBut great to get new knowledge about architecture. Invited and described by [Paul M. Jones](http://paul-m-jones.com/)\nin 2014 using **PHP**! oh yeah!\n\n![adr](./adr.png)\nAnd the MVC pattern\n![mvc](./mvc.png)\n\nI am not a super expert in Symfony framework but some Docplanner created a blog post about\nimplementation ADR [here](https://medium.com/swlh/implementing-action-domain-responder-pattern-with-symfony-606539eea3a7)\n\nBut the main core of ADR is above. The main action class has a dependency injection with are _Doctors_ and _DoctorFactory_.\nFocus on remember to using _interfaces_. The one thing is strictly tie with framework is an this _annotation_.\nThis action looks very clear, the input and output are specified DTO classes.\n![add_doctor_action](./add_doctor_action.png)\nDTO of input.\n\n```php\n<?php declare(strict_types=1);\n\nnamespace App\\Action\\Input;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nfinal class AddDoctorInput\n{\n    /**\n     * @Assert\\NotBlank()\n     * @var string\n     */\n    private string $firstName;\n    /**\n     * @Assert\\NotBlank()\n     * @var string\n     */\n    private string $lastName;\n\n    private string $specialisation;\n\n    public function __construct(string $firstName, string $lastName, string $specialisation)\n    {\n        $this->firstName = $firstName;\n        $this->lastName = $lastName;\n        $this->specialisation = $specialisation;\n    }\n\n    public function getFirstName(): string\n    {\n        return $this->firstName;\n    }\n\n    public function getLastName(): string\n    {\n        return $this->lastName;\n    }\n\n    public function getSpecialisation(): string\n    {\n        return $this->specialisation;\n    }\n}\n```\n\nDto of output. Very simple to use it to make an system response in each kind of: JSON, XML etc.\n\n```php\n<?php declare(strict_types=1);\n\nnamespace App\\Action\\Output;\n\nfinal class AddDoctorOutput\n{\n    private int $id;\n\n    public function __construct(int $id)\n    {\n        $this->id = $id;\n    }\n\n    public function getId(): int\n    {\n        return $this->id;\n    }\n}\n```\n\nHow look controller now ? You have right - it's not necessary.\n\n```php\n<?php declare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\n\nclass Controller extends AbstractController\n{\n    public function index(): JsonResponse\n    {\n        return new JsonResponse('ReallyDirty API v1.0');\n    }\n}\n```\n\n_This post is a some shortcut to memorize these things.\nIt can looks a little chaotic but it's first post for 2021._\n\nFull presentation: [here](https://docs.google.com/presentation/d/1RkrPrKNUL1DVmHuRFA6RC5eHPRG0xUiNsZLEfI0CZzw/edit#slide=id.gaeea1ef32b_1_1)\n\nThe workshop was great! Thanks for all Docplanner team!\n\n_Marcin_\n"},{"excerpt":"This year - i mean 2020 was an unusual year for everyone - I think.\nTherefore each should summarize own actions. In this post I will write what i have achieved in 2020\nand what i want to achieve in 2…","fields":{"slug":"/summary-2020-plans-for-2021/"},"frontmatter":{"date":"December 31, 2020","title":"Summary 2020 - plans for 2021","tags":["personal"]},"rawMarkdownBody":"\nThis year - i mean 2020 was an unusual year for everyone - I think.\nTherefore each should summarize own actions. In this post I will write what i have achieved in 2020\nand what i want to achieve in 2021.\n\nIn last few days I created this blog. It's another shoot to still practicing writing blog posts.\n\nHow looks this year on github ? Not bad, not good.\n![image-center](./github.png)\n\nI've got plan to fill the 2021 in green!\n\n## 2020\n\n- The most important change - work!\n- I learning **Python** from last few months - it's some repo which I store some exercises [python](https://github.com/MarcinGladkowski/python)\n- I learned a lot of AWS services - I done course of Sephane Maarek [Ultimate AWS Certified Developer Associate 2021 - NEW!](https://www.udemy.com/course/aws-certified-developer-associate-dva-c01/), but it's to early to pass an exam without stress.\n- I got some basic knowledge about DDD techniques. I read Domain-Driven Design in PHP and Domain-Driven Design Distilled (Vaughn Vernon)\n- I have finished the one of the best book about programming (yep, today): 'Zrozumieć programowanie' (Gynvael Coldwind)\n- I training a lot of programming. Besides of repo i practiced resolving some golf (from Coding Dojo Silesia) and other exercises\n  - Coding Dojo Silesia events:\n    - [Game of life - JS](https://github.com/MarcinGladkowski/gameoflife-kata)\n    - [Sql engine - JS](https://github.com/MarcinGladkowski/sql-engine-kata)\n    - [Vending Machine - PHP - not finished](https://github.com/MarcinGladkowski/vending-machine-php)\n  - WarsawJS:\n    - [WarsawJS workshop 43 - intermediate javascript training](https://github.com/MarcinGladkowski/warsawjs-workshop-43)\n    - [WarsawJS Workshop #44 - Design Patterns](https://github.com/MarcinGladkowski/warsawjs-workshop-44-design-patterns)\n    - [WarsawJS workshop #46 - Unit testing](https://github.com/MarcinGladkowski/warsawjs-workshop-46-piotrek)\n  - Docplanner Workshops:\n    - [Bank - my implementation of Event Sourcing](https://github.com/MarcinGladkowski/Docplanner_Tech_Workshops_1)\n    - [Clean Code workshop](https://github.com/MarcinGladkowski/clean-code-architecture)\n  - Others\n    - [Basics of Bash](https://github.com/MarcinGladkowski/bash-training)\n  - I am sure, that was a lot of other things...\n- I participated in only one stationary conference (Boiling Frogs 2020) :/\n\n## 2021\n\n- Keep going with Python and AWS services\n- I want to create some IoT things (like magic mirror)\n- Keep training programming languages a lot!\n- And also practicing my speaking English.\n- Do something for open source.\n- Participate in some hackathon.\n\n_Marcin_\n"},{"excerpt":"Słowem wstępu W tym wpisie skupię się na możliwościach skryptów powłoki Bash, bezpieczeństwie i dobrych praktykach tworzenia skryptów. Oczywiście temat nie będzie prze zemnie wyczerpany, a jest jedyn…","fields":{"slug":"/bash-training-2/"},"frontmatter":{"date":"May 31, 2020","title":"Bash training 2","tags":["bash"]},"rawMarkdownBody":"\n### Słowem wstępu\n\nW tym wpisie skupię się na możliwościach skryptów powłoki Bash, bezpieczeństwie i dobrych praktykach tworzenia skryptów.\n\nOczywiście temat nie będzie prze zemnie wyczerpany, a jest jedynie podstawą dla początkujących tak aby tworzyć wystarczająco dobre skrypty oraz zapobiec pewnym powszechnym błędom.\n\nW moim repozytoium [bash_training](https://github.com/MarcinGladkowski/bash-training) są podstawowe skrypty gdzie zapoznawałem się składnią języka.\n\n### Bezpieczeństwo\n\n#### Przytoczę najważniejsze zasady działania z różnymi skryptami, w momencie gdy mamy coś zrobić przy ich pomocy:\n\n- Musisz być ostrożnym co wykonujesz!\n- Nie uruchamiaj wszystkiego z uprawnieniami **root**\n- Dodaj _alias_ na komendy systemowe, ktore mogą narobić najwięcej szkód! (np: alias='rm -i')\n- Jest wiele możliwości ataku! - nie uruchamiaj skryptów o dziwnej dla Ciebie zawartości\n\n### Jak napisać wystarczająco dobry skrypt powłoki ?\n\nNależy pamiętać, że dobrze napisany skrypt urchoni nas przed problemami. Gdy zrobimy to niedbale możemy stracić ważne dla nas pliki czy uszkodzić nasz system. Mniejszy problem, gdy będzie to tylko nasze lokalne środowisko.\n\nRady opisane poniżej będą zaczerpnięte z wpisu na blogu [https://devopsiarz.pl - wpis](https://devopsiarz.pl/bash/tutorial-kurs-pisania-dobrych-skryptow-bash-wstep-dobre-praktyki-shellcheck/).\n\nPo napisaniu własnego skryptu warto użyć narzędzia do sprawdzenia poprawności składni i potencjalnych problemów. Polecane jest narzędzie **shellcheck**. Do instalacji na _Ubuntu_ wystarczy użyć standardowego managera paczek `sudo apt-get install -y shellcheck`\n\nUżyjemy tego narzędzia do analizy skryptu, którego napisałem ostatnii na potrzeby dodawania nowego pliku z wpisem dla Jeckyll.\n\n```bash\n#!/bin/bash\n\nPOSTS_DIR=\"${PWD}/_posts/\"\necho \"Create new post\"\ndate=$(date '+%Y-%m-%d')\necho \"Default time for post is $date\"\n\necho \"Set title of post\"\nread title # find idea to get title (set maximum arguments)\n# parse setting -\npostFile=\"$date-${title/ /-}.md\"\n\nif [ -f $postFile ]; then\n   echo \"Post with name $postFile exists!\"\n   # want to delete ?\nfi\n\nNEW_POST_FILE=\"${POSTS_DIR}${postFile}\"\n\ntouch \"${POSTS_DIR}${postFile}\"\necho \"Created new post! ${postFile}\"\n\ntee -a ${NEW_POST_FILE} <<HEADERS\n---\nlayout: default\ntitle: ${title}\n---\nHEADERS\n```\n\nWykonajmy teraz analizę przy pomocy `shellcheck` wykonując komendę: `shellcheck ./scripts/newPost.sh`\n\nOutput w wierszu poleceń:\n\n```bash\nread title # find idea to get title (set maximum arguments)\n^--^ SC2162: read without -r will mangle backslashes.\n\n\nIn ./scripts/newPost.sh line 13:\nif [ -f $postFile ]; then\n        ^-------^ SC2086: Double quote to prevent globbing and word splitting.\n\nDid you mean:\nif [ -f \"$postFile\" ]; then\n\n\nIn ./scripts/newPost.sh line 23:\ntee -a ${NEW_POST_FILE} <<HEADERS\n       ^--------------^ SC2086: Double quote to prevent globbing and word splitting.\n\nDid you mean:\ntee -a \"${NEW_POST_FILE}\" <<HEADERS\n\nFor more information:\n  https://www.shellcheck.net/wiki/SC2086 -- Double quote to prevent globbing ...\n  https://www.shellcheck.net/wiki/SC2162 -- read without -r will mangle backs...\n```\n\nZ powyższej analizy wystarczy, że jeśli dodamy cudzysłów w dwóch miejscach i parametr `-r` do odczytywania inputu możemy poprawić działanie skryptu. Oczywiście to jednak trochę za mało.\n\nZ przyzwyczajenia często używałem zapisu zmiennych z postaci `postFile`, ale z tego co widzę lepiej z wygląda zapis w postaci `POST_FILE` lub `post_file`.\n\nZ przytoczonego prze ze mnie wpisu można jednak wyciągnąć dużo więcej.\n\nJako, że nigdy nie pisałem za dużo skryptów `Bash` można się jeszcze dużo nauczyć.\n\nCzego można by jeszcze opisać i nauczyć się, a jest jeszcze sporo tego. Mimo, że jest XXI skrypty `Bash` można spotkać wszędzie np. gdy tworzysz np swój obraz dokera w `Dockerfile`.\n\nCo chciałym jeszcze opisać:\n\n- Jak tworzyć odpowiednie warunki.\n- Sprawdznie odpowiednich oprawnień.\n- Tworzenie odpowiedniego skryptu z parametrami przy użyciu `getopt`.\n- Kody błędów oraz zwracanie ich, obsługa błędów.\n\nPozdrawiam\nMarcin\n"},{"excerpt":"I oto kolejny wpis. Tym razem o języku powłoki Bash. Nie będę rozpisywał się o jego historii czy specyfice. Wszystko można znaleźć bez problemu w internecie. Dlaczego zacząłem go trenować? Szybkie na…","fields":{"slug":"/bash-training/"},"frontmatter":{"date":"May 28, 2020","title":"Bash training","tags":["bash"]},"rawMarkdownBody":"\nI oto kolejny wpis. Tym razem o języku powłoki Bash. Nie będę rozpisywał się o jego historii czy specyfice. Wszystko można znaleźć bez problemu w internecie.\n\nDlaczego zacząłem go trenować? Szybkie napisanie skyptu automatyzującego jakąś czynność jest bezcenna. Oczywiście do automatyzacji można polecić inne języki takie jak Python czy Go. Jednak taki skrypt powłoki zadziała prawie na każdym środowisku linuxowym (piszę prawie bo jestem przekonany, że mogą istnieć jakieś wyjątki). Mimo 2020 roku takie skrypty wykorzystywane są np. przez obrazy dockera gdzie to możemy wykorzystać do budowy naszego środowiska skrypty takie jak `docker-entrypoint.sh` `wait-for-it.sh`. Jak każda składania posiada swoje specyficzne komendy, czy triki. Jednak nie trzeba wiedzieć wszystkiego.\n\nTen tydzień/lub dłuższy okres czasu spędzam wolny czas na ćwiczeniu pisania dobrych skryptów Bash.\n\nZnalazłem niezły przewodnik w j.polskim, oraz zaczęrpnąłem trochę wiedzy z bloga Devopsiarz, oraz utworzyłem swoje repozytorium na napisany kod.\n\n- [przewodnik](https://bash.0x1fff.com/)\n- [devopsiarz.pl](https://devopsiarz.pl/bash/tutorial-kurs-pisania-dobrych-skryptow-bash-wstep-dobre-praktyki-shellcheck/)\n- [trening_bash](https://github.com/MarcinGladkowski/bash-training)\n\nJeden z moich skryptów napisany po tym krótkim treningu to skrypt w tym repozytorium do tworzenia szablonu nowego wpisu `./scripts/newPost.sh`.\n\nW następnych wpisach chciałbym zebrać najlepsze praktyki i pomysły na realizację pomocnych skryptów powłoki Bash.\n\n_Pozdrawiam_\n_Marcin_\n"},{"excerpt":"Nadszedł czas na pierwszy wpis poza Hello World. Dziś brałem udział w kolejnych warsztatach WarsawJS. Tym razem głównym tematem były wzorce projektowe. To dla mnie temat, który co jakiś czas trzeba s…","fields":{"slug":"/warsawjs-desing-patterns/"},"frontmatter":{"date":"May 24, 2020","title":"WarsawJs 44 Design patterns","tags":["design patterns"]},"rawMarkdownBody":"\nNadszedł czas na pierwszy wpis poza Hello World.\n\nDziś brałem udział w kolejnych warsztatach WarsawJS. Tym razem głównym tematem były wzorce projektowe. To dla mnie temat, który co jakiś czas trzeba sobie odświeżyć.\n\nGrupa do której się zapisałem była prowadzona przez Michała Bury [Linkedin](https://www.linkedin.com/in/michalbury/)\n\nDla uczestników został przygodowany projekt w NodeJs wraz z frameworkiem Express, Knex (baza sqlite), szablony pug oraz kilka testów.\n\nWzorce, które udało nam się omówić podczas dzisiejszych warsztatów to:\n\n- Transaction script\n- Database gateway\n- Strategy\n- Factory\n- Pub Sub\n- Decorator\n- Domain model.\n\nLink z tym co udało się poczynić podczas warsztatów zostawiam tutaj -> [repo](https://github.com/MarcinGladkowski/warsawjs-workshop-44-design-patterns)\n\nJestem już stałym uczestnikiem tych warsztatów i bardzo mi się podobają, chociaż nic nie zastąpi warsztatów na żywo.\n\n_Pozdrawiam_  \n_Marcin_\n"},{"excerpt":"Hello world, to musi być zawartość każdego pierwszego wpisu. Nie raz już blogowałem, ale zawsze wydawało mi się,\nże musi to być długa rozbudowana forma. Za radami tagu #nocode postanowiłem znowu post…","fields":{"slug":"/hello-world/"},"frontmatter":{"date":"May 23, 2020","title":"Hello world","tags":["personal"]},"rawMarkdownBody":"\n**Hello world**, to musi być zawartość każdego pierwszego wpisu. Nie raz już blogowałem, ale zawsze wydawało mi się,\nże musi to być długa rozbudowana forma. Za radami tagu #nocode postanowiłem znowu postawić blog jednak na krótsze i\nczęstsze treści. Github + Jeckyll + Markdown idealnie się do tego nadają.\n\nMarcin\n"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}